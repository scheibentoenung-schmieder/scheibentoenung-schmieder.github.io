{"version":3,"sources":["webpack:///libs/home/src/lib/components/home/home.component.ts","webpack:///libs/home/src/lib/components/home/home.component.html","webpack:///libs/home/src/index.ts","webpack:///libs/home/src/lib/home.module.ts","webpack:///libs/home/src/lib/home-routing.module.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"names":["HomeComponent","HomeModule","routes","path","component","data","cover","fullSize","title","description","HomeRoutingModule","forChild","_c0","_c1","_c2","_c3","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","property","value","nativeElement","style","Math","round","ɵfac","MatGridTile_Factory","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","rowspan","colspan","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","selector","host","None","OnPush","MatGridTileText","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","_t","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","TileCoordinator","columnIndex","rowIndex","numColumns","tiles","tracker","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","max","i","start","lastRowMax","rowCount","row","col","cssCalcAllowedValue","TileStyler","_rows","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","test","getTileSpan","getGutterSpan","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","_checkCols","_checkRowHeight","_layoutTiles","_rowHeight","_setTileStyler","rowHeight","_tileStyler","reset","_tileCoordinator","filter","update","init","index","pos","setStyle","getComputedHeight","newValue","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","provide","useExisting","MatGridList_Template","providers","MatGridListModule","ɵmod","ɵinj","factory","MatGridListModule_Factory","imports","ngJitMode","declarations","exports"],"mappings":"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","file":"scheibentoenung-schmieder-home-es5.js","sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'scheibentoenung-schmieder-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n\n\n})\nexport class HomeComponent  {\n}\n","<div class=\"list\">\n  <mat-card class=\"card\">\n    <mat-card-header>\n      <mat-card-title>Ab sofort haben wir die Regular Titan </mat-card-title>\n      <mat-card-subtitle\n        >Scheibentönungsfolie mit 35% Lichtdurchlässigkeit</mat-card-subtitle\n      >\n    </mat-card-header>\n    <img\n      mat-card-image\n      src=\"https://img.webme.com/pic/s/scheibentoenung-schmieder/20200305_173405.jpg\"\n      alt=\"Photo of a Shiba Inu\"\n    />\n    <mat-card-content>\n      <p>\n        Unserer Service....\n      </p>\n    </mat-card-content>\n    <mat-card-actions>\n      <a mat-flat-button routerLink=\"/folien\" color=\"primary\">weiterlesen</a>\n    </mat-card-actions>\n  </mat-card>\n  <mat-card class=\"card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"example-header-image\"></div>\n      <mat-card-title>Professioneller Einbau</mat-card-title>\n      <mat-card-subtitle>zum kleinen Preis!</mat-card-subtitle>\n    </mat-card-header>\n    <img\n      mat-card-image\n      src=\"https://img.webme.com/pic/s/scheibentoenung-schmieder/kind.jpg\"\n      alt=\"Photo of a Shiba Inu\"\n    />\n    <mat-card-content>\n      <p>\n        Diese Folie brilliert mit Ihrem sanften Schwarzton und kommt den\n        heutigen Werkstönungen am nächsten.\n      </p>\n    </mat-card-content>\n    <mat-card-actions>\n      <a mat-flat-button routerLink=\"/folien\" color=\"primary\">weiterlesen</a>\n    </mat-card-actions>\n  </mat-card>\n\n  <mat-card class=\"card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"example-header-image\"></div>\n      <mat-card-title>Häufige Fragen</mat-card-title>\n      <mat-card-subtitle>rund ums Thema Folien</mat-card-subtitle>\n    </mat-card-header>\n    <img\n      mat-card-image\n      src=\"https://img.webme.com/pic/s/scheibentoenung-schmieder/buissnes.jpg\"\n      alt=\"Photo of a Shiba Inu\"\n    />\n    <mat-card-content>\n      <p>\n        Wie lang dauer eine Tönung ?\n      </p>\n    </mat-card-content>\n    <mat-card-actions>\n      <a mat-flat-button routerLink=\"/folien\" color=\"primary\">weiterlesen</a>\n    </mat-card-actions>\n  </mat-card>\n</div>\n","export * from './lib/home.module';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { FolienSelectionComponent } from '../../../folien/src/lib/components/folien-selection/folien-selection.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { HomeRoutingModule } from './home-routing.module';\n\n@NgModule({\n  declarations: [HomeComponent],\n  imports: [\n    CommonModule,\n    MatGridListModule,\n    MatCardModule,\n    HomeRoutingModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n})\nexport class HomeModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FolienSelectionComponent } from '../../../folien/src/lib/components/folien-selection/folien-selection.component';\n\nimport { HomeComponent } from './components/home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n    data: {\n      cover: 'home.jpg',\n      fullSize: true,\n      title: 'Scheibentönung Schmieder',\n      description: 'Scheibentönung in Chemnitz, Limbach und Umgebung',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomeRoutingModule {}\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\";\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); }, imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map"]}