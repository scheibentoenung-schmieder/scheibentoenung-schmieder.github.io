{"version":3,"sources":["webpack:///Users/larswiedemann/repos/gernsdorfer/scheibentoenung-schmieder/libs/home/src/index.ts","webpack:///Users/larswiedemann/repos/gernsdorfer/scheibentoenung-schmieder/libs/home/src/lib/components/home/home.component.ts","webpack:///Users/larswiedemann/repos/gernsdorfer/scheibentoenung-schmieder/libs/home/src/lib/components/home/home.component.html","webpack:///Users/larswiedemann/repos/gernsdorfer/scheibentoenung-schmieder/libs/home/src/lib/home-routing.module.ts","webpack:///Users/larswiedemann/repos/gernsdorfer/scheibentoenung-schmieder/libs/home/src/lib/home.module.ts","webpack:///Users/larswiedemann/repos/gernsdorfer/scheibentoenung-schmieder/node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"names":["HomeComponent","selector","templateUrl","styleUrls","routes","path","component","HomeRoutingModule","forChild","imports","exports","HomeModule","declarations","_c0","_c1","_c2","MAT_GRID_LIST","MatGridListBase","MatGridTile","_element","_gridList","_rowspan","_colspan","property","value","nativeElement","style","Math","round","ɵfac","MatGridTile_Factory","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","rowspan","colspan","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","host","None","OnPush","MatGridTileText","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","_t","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","Tile","TileCoordinator","columnIndex","rowIndex","numColumns","tiles","tracker","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","max","i","start","lastRowMax","rowCount","row","col","cssCalcAllowedValue","TileStyler","_rows","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","test","getTileSpan","getGutterSpan","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","_checkCols","_checkRowHeight","_layoutTiles","_rowHeight","_setTileStyler","rowHeight","_tileStyler","reset","_tileCoordinator","filter","update","init","index","pos","setStyle","getComputedHeight","newValue","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","provide","useExisting","MatGridList_Template","providers","MatGridListModule","ɵmod","ɵinj","factory","MatGridListModule_Factory","ngJitMode"],"mappings":"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","file":"scheibentoenung-schmieder-home-es5.js","sourcesContent":["export * from './lib/home.module';\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'scheibentoenung-schmieder-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n\r\n\r\n})\r\nexport class HomeComponent  {\r\n}\r\n","<div class=\"cover\">\r\n  <div class=\"container\">\r\n\r\n      <a mat-flat-button routerLink=\"/\" class=\"call\">Jetzt Termin vereinbaren <mat-icon>calendar_today</mat-icon></a>\r\n\r\n  </div>\r\n</div>\r\n\r\n<div class=\"list\" >\r\n    <mat-card class=\"card\">\r\n      <mat-card-header>\r\n        <mat-card-title>Ab sofort haben wir die Regular Titan </mat-card-title>\r\n        <mat-card-subtitle>Scheibentönungsfolie mit 35% Lichtdurchlässigkeit</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <img mat-card-image src=\"https://img.webme.com/pic/s/scheibentoenung-schmieder/20200305_173405.jpg\" alt=\"Photo of a Shiba Inu\">\r\n      <mat-card-content>\r\n        <p>\r\n          Unserer Service....\r\n        </p>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n        <a mat-button routerLink=\"/\" color=\"primary\">weiterlesen</a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <mat-card class=\"card\">\r\n      <mat-card-header>\r\n        <div mat-card-avatar class=\"example-header-image\"></div>\r\n        <mat-card-title>Professioneller Einbau</mat-card-title>\r\n        <mat-card-subtitle>zum kleinen Preis!</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <img mat-card-image src=\"https://img.webme.com/pic/s/scheibentoenung-schmieder/kind.jpg\" alt=\"Photo of a Shiba Inu\">\r\n      <mat-card-content>\r\n        <p>\r\n          Diese Folie brilliert mit Ihrem sanften Schwarzton und kommt den heutigen Werkstönungen am nächsten.\r\n        </p>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n        <a mat-button routerLink=\"/\" color=\"primary\">weiterlesen</a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n\r\n  <mat-card class=\"card\">\r\n    <mat-card-header>\r\n      <div mat-card-avatar class=\"example-header-image\"></div>\r\n      <mat-card-title>Häufige Fragen</mat-card-title>\r\n      <mat-card-subtitle>rund ums Thema Folien</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <img mat-card-image src=\"https://img.webme.com/pic/s/scheibentoenung-schmieder/buissnes.jpg\" alt=\"Photo of a Shiba Inu\">\r\n    <mat-card-content>\r\n      <p>\r\n        Wie lang dauer eine Tönung ?\r\n      </p>\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <a mat-button routerLink=\"/\" color=\"primary\">weiterlesen</a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>\r\n\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\n\r\nimport {HomeComponent} from './components/home/home.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n  },\r\n  {\r\n    path: '**',\r\n    component: HomeComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HomeRoutingModule {}\r\n\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { HomeComponent } from './components/home/home.component';\nimport { HomeRoutingModule } from './home-routing.module';\n\n@NgModule({\n  declarations: [HomeComponent\n  ],\n  imports: [CommonModule, MatGridListModule,MatCardModule, HomeRoutingModule, MatButtonModule, MatIconModule ],\n})\nexport class HomeModule {\n\n}\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * Base interface for a `MatGridList`.\n * \\@docs-private\n * @record\n */\nfunction MatGridListBase() { }\nif (false) {\n    /** @type {?} */\n    MatGridListBase.prototype.cols;\n    /** @type {?} */\n    MatGridListBase.prototype.gutterSize;\n    /** @type {?} */\n    MatGridListBase.prototype.rowHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-tile.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_rowspan;\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_colspan;\n    /** @type {?} */\n    MatGridTile.prototype._rowspan;\n    /** @type {?} */\n    MatGridTile.prototype._colspan;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTile.prototype._element;\n    /** @type {?} */\n    MatGridTile.prototype._gridList;\n}\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridTileText.prototype._lines;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTileText.prototype._element;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-coordinator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface describing a tile.\n * \\@docs-private\n * @record\n */\nfunction Tile() { }\nif (false) {\n    /**\n     * Amount of rows that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.rowspan;\n    /**\n     * Amount of columns that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.colspan;\n}\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles Tiles to be positioned.\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\nif (false) {\n    /**\n     * Tracking array (see class description).\n     * @type {?}\n     */\n    TileCoordinator.prototype.tracker;\n    /**\n     * Index at which the search for the next gap will start.\n     * @type {?}\n     */\n    TileCoordinator.prototype.columnIndex;\n    /**\n     * The current row index.\n     * @type {?}\n     */\n    TileCoordinator.prototype.rowIndex;\n    /**\n     * The computed (row, col) position of each tile (the output).\n     * @type {?}\n     */\n    TileCoordinator.prototype.positions;\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TilePosition.prototype.row;\n    /** @type {?} */\n    TilePosition.prototype.col;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\nif (false) {\n    /** @type {?} */\n    TileStyler.prototype._gutterSize;\n    /** @type {?} */\n    TileStyler.prototype._rows;\n    /** @type {?} */\n    TileStyler.prototype._rowspan;\n    /** @type {?} */\n    TileStyler.prototype._cols;\n    /** @type {?} */\n    TileStyler.prototype._direction;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @abstract\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * \\@docs-private\n     * @abstract\n     * @param {?} list Grid list that the styler was attached to.\n     * @return {?}\n     */\n    TileStyler.prototype.reset = function (list) { };\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    FixedTileStyler.prototype.fixedRowHeight;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\nif (false) {\n    /**\n     * Ratio width:height given by user to determine row height.\n     * @type {?}\n     */\n    RatioTileStyler.prototype.rowHeightRatio;\n    /** @type {?} */\n    RatioTileStyler.prototype.baseTileHeight;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridList.ngAcceptInputType_cols;\n    /**\n     * Number of columns being rendered.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._cols;\n    /**\n     * Used for determiningthe position of each tile in the grid.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._rowHeight;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._gutter;\n    /**\n     * Sets position and size styles for a tile\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileStyler;\n    /**\n     * Query list of tiles that are being rendered.\n     * @type {?}\n     */\n    MatGridList.prototype._tiles;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); }, imports: [[MatLineModule, MatCommonModule],\n        MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatLineModule,\n        MatCommonModule,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map"]}