{"version":3,"sources":["webpack:///home/runner/work/code/code/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js"],"names":["throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","ComponentType","Portal","host","hasAttached","_attachedHost","attach","detach","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","TemplatePortal","template","context","templateRef","undefined","elementRef","DomPortal","element","nativeElement","PortalOutlet","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","BasePortalHost","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","appendChild","replaceChild","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","removeChild","DomPortalHost","CdkPortal","ɵfac","CdkPortal_Factory","t","ɵdir","type","selectors","exportAs","features","ctorParameters","args","selector","TemplatePortalDirective","TemplatePortalDirective_Factory","ɵTemplatePortalDirective_BaseFactory","provide","useExisting","providers","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","_attachedRef","ref","emit","clear","nodeType","ELEMENT_NODE","CdkPortalOutlet_Factory","inputs","outputs","decorators","propDecorators","PortalHostDirective","PortalHostDirective_Factory","ɵPortalHostDirective_BaseFactory","PortalModule","ɵmod","ɵinj","factory","PortalModule_Factory","ngJitMode","declarations","exports","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value","get"],"mappings":"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","file":"default~scheibentoenung-schmieder-contact~scheibentoenung-schmieder-folien-es5.js","sourcesContent":["import { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface that can be used to generically type a class.\n * @record\n * @template T\n */\nfunction ComponentType() { }\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Portal.prototype._attachedHost;\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\nif (false) {\n    /**\n     * The type of the component that will be instantiated for attachment.\n     * @type {?}\n     */\n    ComponentPortal.prototype.component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     * @type {?}\n     */\n    ComponentPortal.prototype.viewContainerRef;\n    /**\n     * [Optional] Injector used for the instantiation of the component.\n     * @type {?}\n     */\n    ComponentPortal.prototype.injector;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * Defaults to using the resolver from the outlet that the portal is attached to.\n     * @type {?}\n     */\n    ComponentPortal.prototype.componentFactoryResolver;\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\nif (false) {\n    /**\n     * The embedded template that will be used to instantiate an embedded View in the host.\n     * @type {?}\n     */\n    TemplatePortal.prototype.templateRef;\n    /**\n     * Reference to the ViewContainer into which the template will be stamped out.\n     * @type {?}\n     */\n    TemplatePortal.prototype.viewContainerRef;\n    /**\n     * Contextual data to be passed in to the embedded view.\n     * @type {?}\n     */\n    TemplatePortal.prototype.context;\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n * @template T\n */\nclass DomPortal extends Portal {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\nif (false) {\n    /**\n     * DOM node hosting the portal's content.\n     * @type {?}\n     */\n    DomPortal.prototype.element;\n}\n/**\n * A `PortalOutlet` is an space that can contain a single `Portal`.\n * @record\n */\nfunction PortalOutlet() { }\nif (false) {\n    /**\n     * Attaches a portal to this outlet.\n     * @param {?} portal\n     * @return {?}\n     */\n    PortalOutlet.prototype.attach = function (portal) { };\n    /**\n     * Detaches the currently attached portal from this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.detach = function () { };\n    /**\n     * Performs cleanup before the outlet is destroyed.\n     * @return {?}\n     */\n    PortalOutlet.prototype.dispose = function () { };\n    /**\n     * Whether there is currently a portal attached to this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.hasAttached = function () { };\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * The portal currently attached to the host.\n     * @type {?}\n     * @protected\n     */\n    BasePortalOutlet.prototype._attachedPortal;\n    /**\n     * A function that will permanently dispose this host.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._disposeFn;\n    /**\n     * Whether this host has already been permanently disposed.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._isDisposed;\n    /** @type {?} */\n    BasePortalOutlet.prototype.attachDomPortal;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachComponentPortal = function (portal) { };\n    /**\n     * @abstract\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachTemplatePortal = function (portal) { };\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * \\@breaking-change 9.0.0\n * @abstract\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/dom-portal-outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     * @param {?=} _document\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            /** @type {?} */\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            /** @type {?} */\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            super.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            }));\n        });\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => componentRef.destroy()));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        rootNode => this.outletElement.appendChild(rootNode)));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._document;\n    /**\n     * Attaches a DOM portal by transferring its content into the outlet.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    DomPortalOutlet.prototype.attachDomPortal;\n    /**\n     * Element into which the content is projected.\n     * @type {?}\n     */\n    DomPortalOutlet.prototype.outletElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._defaultInjector;\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * @deprecated Use `CdkPortal` instead.\n * \\@breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     * @param {?=} _document\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            /** @type {?} */\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            /** @type {?} */\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            super.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                if (anchorNode.parentNode) {\n                    (/** @type {?} */ (anchorNode.parentNode)).replaceChild(element, anchorNode);\n                }\n            }));\n        });\n        this._document = _document;\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(((/** @type {?} */ (ref.hostView))).rootNodes[0]);\n        }\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => ref.destroy()));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => this._viewContainerRef.clear()));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /**\n     * Gets the root node of the portal outlet.\n     * @private\n     * @return {?}\n     */\n    _getRootNode() {\n        /** @type {?} */\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (/** @type {?} */ ((nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : (/** @type {?} */ (nativeElement.parentNode)))));\n    }\n}\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkPortalOutlet.ngAcceptInputType_portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._document;\n    /**\n     * Whether the portal component is initialized.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._isInitialized;\n    /**\n     * Reference to the currently-attached component/view ref.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._attachedRef;\n    /**\n     * Emits when a portal is attached to the outlet.\n     * @type {?}\n     */\n    CdkPortalOutlet.prototype.attached;\n    /**\n     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    CdkPortalOutlet.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._viewContainerRef;\n}\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\nclass PortalModule {\n}\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective], exports: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal-injector.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._parentInjector;\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._customTokens;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map"]}